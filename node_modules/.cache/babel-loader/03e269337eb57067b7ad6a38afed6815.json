{"ast":null,"code":"var _jsxFileName = \"/Users/jospiesimac/Desktop/8. Web develoement/udemy-traversy/react weatherApp/weather-app/src/components/GetWeather.js\";\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport 'weather-icons/css/weather-icons.css';\nimport Layout from './Layout';\n\nclass GetWeather extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: 'Boston',\n      weatherData: {},\n      icon: undefined,\n      loading: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Dizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  } //getting info from weather api\n\n\n  async componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    const res = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=e9629992d0bde86eaddc6391f50171b7`);\n    const result = res.data;\n    const {\n      name\n    } = result;\n    const {\n      country,\n      sunrise,\n      sunset\n    } = result.sys;\n    const {\n      lat,\n      lon\n    } = result.coord;\n    const {\n      temp,\n      temp_min,\n      temp_max,\n      feels_like,\n      humidity,\n      pressure\n    } = result.main;\n    const {\n      description,\n      icon,\n      icon_id\n    } = result.weather[0];\n    const {\n      speed,\n      deg\n    } = result.wind;\n    this.getWeatherIcon(this.weatherIcon, icon_id);\n    this.setState({\n      weatherData: {\n        name,\n        country,\n        sunrise,\n        sunset,\n        description,\n        temp: Math.floor(temp - 273.15).toFixed(0),\n        feels_like: Math.floor(feels_like - 273.15).toFixed(0),\n        temp_min: Math.floor(temp_min - 273.15).toFixed(0),\n        temp_max: Math.floor(temp_max - 273.15).toFixed(0),\n        speed,\n        deg,\n        humidity,\n        pressure,\n        lat: lat.toFixed(1),\n        lon: lon.toFixed(1)\n      },\n      weatherIcon: {\n        icon,\n        icon_id\n      }\n    });\n  }\n\n  getWeatherIcon(icon, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorms\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    const {\n      name,\n      country,\n      description,\n      temp,\n      feels_like,\n      temp_max,\n      temp_min,\n      sunrise,\n      sunset,\n      speed,\n      deg,\n      humidity,\n      pressure,\n      lat,\n      lon\n    } = this.state.weatherData;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, \"WorldWeather\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, `${name} , ${country}`), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }))));\n  }\n\n}\n\nexport default GetWeather;","map":{"version":3,"sources":["/Users/jospiesimac/Desktop/8. Web develoement/udemy-traversy/react weatherApp/weather-app/src/components/GetWeather.js"],"names":["React","Component","Fragment","axios","Layout","GetWeather","constructor","props","state","city","weatherData","icon","undefined","loading","weatherIcon","Thunderstorm","Dizzle","Rain","Snow","Atmosphere","Clear","Clouds","componentDidMount","setState","res","get","result","data","name","country","sunrise","sunset","sys","lat","lon","coord","temp","temp_min","temp_max","feels_like","humidity","pressure","main","description","icon_id","weather","speed","deg","wind","getWeatherIcon","Math","floor","toFixed","rangeId","Thunderstorms","Drizzle","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,qCAAP;AAEA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,IAAI,EAAE,QADM;AAEZC,MAAAA,WAAW,EAAE,EAFD;AAGZC,MAAAA,IAAI,EAAEC,SAHM;AAIZC,MAAAA,OAAO,EAAE;AAJG,KAAb;AAMA,SAAKC,WAAL,GAAmB;AAClBC,MAAAA,YAAY,EAAE,iBADI;AAElBC,MAAAA,MAAM,EAAE,UAFU;AAGlBC,MAAAA,IAAI,EAAE,kBAHY;AAIlBC,MAAAA,IAAI,EAAE,SAJY;AAKlBC,MAAAA,UAAU,EAAE,QALM;AAMlBC,MAAAA,KAAK,EAAE,cANW;AAOlBC,MAAAA,MAAM,EAAE;AAPU,KAAnB;AASA,GAlBiC,CAoBlC;;;AACA,QAAMC,iBAAN,GAA0B;AACzB,SAAKC,QAAL,CAAc;AAAEV,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,UAAMW,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAChB,oDAAmD,KAAKjB,KAAL,CAAWC,IAAK,yCADnD,CAAlB;AAGA,UAAMiB,MAAM,GAAGF,GAAG,CAACG,IAAnB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAWF,MAAjB;AACA,UAAM;AAAEG,MAAAA,OAAF;AAAWC,MAAAA,OAAX;AAAoBC,MAAAA;AAApB,QAA+BL,MAAM,CAACM,GAA5C;AACA,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAeR,MAAM,CAACS,KAA5B;AACA,UAAM;AACLC,MAAAA,IADK;AAELC,MAAAA,QAFK;AAGLC,MAAAA,QAHK;AAILC,MAAAA,UAJK;AAKLC,MAAAA,QALK;AAMLC,MAAAA;AANK,QAOFf,MAAM,CAACgB,IAPX;AAQA,UAAM;AAAEC,MAAAA,WAAF;AAAehC,MAAAA,IAAf;AAAqBiC,MAAAA;AAArB,QAAiClB,MAAM,CAACmB,OAAP,CAAe,CAAf,CAAvC;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiBrB,MAAM,CAACsB,IAA9B;AAEA,SAAKC,cAAL,CAAoB,KAAKnC,WAAzB,EAAsC8B,OAAtC;AAEA,SAAKrB,QAAL,CAAc;AACbb,MAAAA,WAAW,EAAE;AACZkB,QAAAA,IADY;AAEZC,QAAAA,OAFY;AAGZC,QAAAA,OAHY;AAIZC,QAAAA,MAJY;AAKZY,QAAAA,WALY;AAMZP,QAAAA,IAAI,EAAEc,IAAI,CAACC,KAAL,CAAWf,IAAI,GAAG,MAAlB,EAA0BgB,OAA1B,CAAkC,CAAlC,CANM;AAOZb,QAAAA,UAAU,EAAEW,IAAI,CAACC,KAAL,CAAWZ,UAAU,GAAG,MAAxB,EAAgCa,OAAhC,CAAwC,CAAxC,CAPA;AAQZf,QAAAA,QAAQ,EAAEa,IAAI,CAACC,KAAL,CAAWd,QAAQ,GAAG,MAAtB,EAA8Be,OAA9B,CAAsC,CAAtC,CARE;AASZd,QAAAA,QAAQ,EAAEY,IAAI,CAACC,KAAL,CAAWb,QAAQ,GAAG,MAAtB,EAA8Bc,OAA9B,CAAsC,CAAtC,CATE;AAUZN,QAAAA,KAVY;AAWZC,QAAAA,GAXY;AAYZP,QAAAA,QAZY;AAaZC,QAAAA,QAbY;AAcZR,QAAAA,GAAG,EAAEA,GAAG,CAACmB,OAAJ,CAAY,CAAZ,CAdO;AAeZlB,QAAAA,GAAG,EAAEA,GAAG,CAACkB,OAAJ,CAAY,CAAZ;AAfO,OADA;AAkBbtC,MAAAA,WAAW,EAAE;AACZH,QAAAA,IADY;AAEZiC,QAAAA;AAFY;AAlBA,KAAd;AAuBA;;AACDK,EAAAA,cAAc,CAACtC,IAAD,EAAO0C,OAAP,EAAgB;AAC7B,YAAQ,IAAR;AACC,WAAKA,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAAlC;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBwC;AAAzB,SAAd;AACA;;AAED,WAAKD,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAAlC;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiByC;AAAzB,SAAd;AACA;;AAED,WAAKF,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAAlC;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBG;AAAzB,SAAd;AACA;;AAED,WAAKoC,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAAlC;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBI;AAAzB,SAAd;AACA;;AAED,WAAKmC,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAAlC;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBK;AAAzB,SAAd;AACA;;AAED,WAAKkC,OAAO,KAAK,GAAjB;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBM;AAAzB,SAAd;AACA;;AAED,WAAKiC,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAAlC;AACC,aAAK9B,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBO;AAAzB,SAAd;AACA;;AACD;AACC,aAAKE,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBO;AAAzB,SAAd;AA7BF;AA+BA;;AAEDmC,EAAAA,MAAM,GAAG;AACR,UAAM;AACL5B,MAAAA,IADK;AAELC,MAAAA,OAFK;AAGLc,MAAAA,WAHK;AAILP,MAAAA,IAJK;AAKLG,MAAAA,UALK;AAMLD,MAAAA,QANK;AAOLD,MAAAA,QAPK;AAQLP,MAAAA,OARK;AASLC,MAAAA,MATK;AAULe,MAAAA,KAVK;AAWLC,MAAAA,GAXK;AAYLP,MAAAA,QAZK;AAaLC,MAAAA,QAbK;AAcLR,MAAAA,GAdK;AAeLC,MAAAA;AAfK,QAgBF,KAAK1B,KAAL,CAAWE,WAhBf;AAiBA,wBACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,GAAEkB,IAAK,MAAKC,OAAQ,EAA1B,CAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHD,CADD,CADD,CADD;AAWA;;AAnIiC;;AAsInC,eAAexB,UAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport 'weather-icons/css/weather-icons.css';\n\nimport Layout from './Layout';\n\nclass GetWeather extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcity: 'Boston',\n\t\t\tweatherData: {},\n\t\t\ticon: undefined,\n\t\t\tloading: false,\n\t\t};\n\t\tthis.weatherIcon = {\n\t\t\tThunderstorm: 'wi-thunderstorm',\n\t\t\tDizzle: 'wi-sleet',\n\t\t\tRain: 'wi-storm-showers',\n\t\t\tSnow: 'wi-snow',\n\t\t\tAtmosphere: 'wi-fog',\n\t\t\tClear: 'wi-day-sunny',\n\t\t\tClouds: 'wi-day-fog',\n\t\t};\n\t}\n\n\t//getting info from weather api\n\tasync componentDidMount() {\n\t\tthis.setState({ loading: true });\n\t\tconst res = await axios.get(\n\t\t\t`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=e9629992d0bde86eaddc6391f50171b7`,\n\t\t);\n\t\tconst result = res.data;\n\n\t\tconst { name } = result;\n\t\tconst { country, sunrise, sunset } = result.sys;\n\t\tconst { lat, lon } = result.coord;\n\t\tconst {\n\t\t\ttemp,\n\t\t\ttemp_min,\n\t\t\ttemp_max,\n\t\t\tfeels_like,\n\t\t\thumidity,\n\t\t\tpressure,\n\t\t} = result.main;\n\t\tconst { description, icon, icon_id } = result.weather[0];\n\t\tconst { speed, deg } = result.wind;\n\n\t\tthis.getWeatherIcon(this.weatherIcon, icon_id);\n\n\t\tthis.setState({\n\t\t\tweatherData: {\n\t\t\t\tname,\n\t\t\t\tcountry,\n\t\t\t\tsunrise,\n\t\t\t\tsunset,\n\t\t\t\tdescription,\n\t\t\t\ttemp: Math.floor(temp - 273.15).toFixed(0),\n\t\t\t\tfeels_like: Math.floor(feels_like - 273.15).toFixed(0),\n\t\t\t\ttemp_min: Math.floor(temp_min - 273.15).toFixed(0),\n\t\t\t\ttemp_max: Math.floor(temp_max - 273.15).toFixed(0),\n\t\t\t\tspeed,\n\t\t\t\tdeg,\n\t\t\t\thumidity,\n\t\t\t\tpressure,\n\t\t\t\tlat: lat.toFixed(1),\n\t\t\t\tlon: lon.toFixed(1),\n\t\t\t},\n\t\t\tweatherIcon: {\n\t\t\t\ticon,\n\t\t\t\ticon_id,\n\t\t\t},\n\t\t});\n\t}\n\tgetWeatherIcon(icon, rangeId) {\n\t\tswitch (true) {\n\t\t\tcase rangeId >= 200 && rangeId <= 232:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Thunderstorms });\n\t\t\t\tbreak;\n\n\t\t\tcase rangeId >= 300 && rangeId <= 321:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Drizzle });\n\t\t\t\tbreak;\n\n\t\t\tcase rangeId >= 500 && rangeId <= 531:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Rain });\n\t\t\t\tbreak;\n\n\t\t\tcase rangeId >= 600 && rangeId <= 622:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Snow });\n\t\t\t\tbreak;\n\n\t\t\tcase rangeId >= 701 && rangeId <= 781:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Atmosphere });\n\t\t\t\tbreak;\n\n\t\t\tcase rangeId === 800:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clear });\n\t\t\t\tbreak;\n\n\t\t\tcase rangeId >= 801 && rangeId <= 804:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clouds });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clouds });\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tname,\n\t\t\tcountry,\n\t\t\tdescription,\n\t\t\ttemp,\n\t\t\tfeels_like,\n\t\t\ttemp_max,\n\t\t\ttemp_min,\n\t\t\tsunrise,\n\t\t\tsunset,\n\t\t\tspeed,\n\t\t\tdeg,\n\t\t\thumidity,\n\t\t\tpressure,\n\t\t\tlat,\n\t\t\tlon,\n\t\t} = this.state.weatherData;\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\t<h1>WorldWeather</h1>\n\t\t\t\t\t\t<h2>{`${name} , ${country}`}</h2>\n\t\t\t\t\t\t<h3></h3>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default GetWeather;\n"]},"metadata":{},"sourceType":"module"}